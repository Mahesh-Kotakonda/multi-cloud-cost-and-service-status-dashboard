name: App DockerHub Build

on:
  push:
    branches:
      - main
    paths:
      - 'app/**'
      - 'docker/**'
      - '.github/workflows/app-build.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'app/**'
      - 'docker/**'
  workflow_dispatch:
    inputs:
      services:
        description: "Which services to build? (comma-separated: backend,worker,frontend or all)"
        required: true
        default: "all"

jobs:
  determine-services:
    runs-on: ubuntu-latest
    outputs:
      build_backend: ${{ steps.set-matrix.outputs.build_backend }}
      build_worker: ${{ steps.set-matrix.outputs.build_worker }}
      build_frontend: ${{ steps.set-matrix.outputs.build_frontend }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Detect changed paths
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend:
              - 'app/backend/**'
              - 'docker/backend/**'
            worker:
              - 'app/worker/**'
              - 'docker/worker/**'
            frontend:
              - 'app/frontend/**'
              - 'docker/frontend/**'

      - name: Set services to build
        id: set-matrix
        run: |
          echo "build_backend=false" >> $GITHUB_OUTPUT
          echo "build_worker=false" >> $GITHUB_OUTPUT
          echo "build_frontend=false" >> $GITHUB_OUTPUT

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            INPUT="${{ github.event.inputs.services }}"
            if [[ "$INPUT" == "all" ]]; then
              echo "build_backend=true" >> $GITHUB_OUTPUT
              echo "build_worker=true" >> $GITHUB_OUTPUT
              echo "build_frontend=true" >> $GITHUB_OUTPUT
            else
              if [[ "$INPUT" == *"backend"* ]]; then
                echo "build_backend=true" >> $GITHUB_OUTPUT
              fi
              if [[ "$INPUT" == *"worker"* ]]; then
                echo "build_worker=true" >> $GITHUB_OUTPUT
              fi
              if [[ "$INPUT" == *"frontend"* ]]; then
                echo "build_frontend=true" >> $GITHUB_OUTPUT
              fi
            fi
          else
            if [[ "${{ steps.changes.outputs.backend }}" == "true" ]]; then
              echo "build_backend=true" >> $GITHUB_OUTPUT
            fi
            if [[ "${{ steps.changes.outputs.worker }}" == "true" ]]; then
              echo "build_worker=true" >> $GITHUB_OUTPUT
            fi
            if [[ "${{ steps.changes.outputs.frontend }}" == "true" ]]; then
              echo "build_frontend=true" >> $GITHUB_OUTPUT
            fi
          fi

  # ---------------- SONARQUBE SCAN JOBS ---------------- #

  sonarqube-scan-backend-source:
    needs: determine-services
    if: needs.determine-services.outputs.build_backend == 'true'
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Add SonarScanner to PATH
        run: echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH
      - name: Verify SonarScanner CLI
        run: sonar-scanner --version
      - name: Run SonarQube Scan (Backend)
        run: |
          sonar-scanner \
            -Dsonar.projectKey=backend-service \
            -Dsonar.projectName='Backend Service' \
            -Dsonar.sources=app/backend \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      - name: Check SonarQube Quality Gate
        id: sonar-quality-gate-backend
        uses: sonarsource/sonarqube-quality-gate-action@v1.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  sonarqube-scan-worker-source:
    needs: determine-services
    if: needs.determine-services.outputs.build_worker == 'true'
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Add SonarScanner to PATH
        run: echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH
      - name: Verify SonarScanner CLI
        run: sonar-scanner --version
      - name: Run SonarQube Scan (Worker)
        run: |
          sonar-scanner \
            -Dsonar.projectKey=worker-service \
            -Dsonar.projectName='Worker Service' \
            -Dsonar.sources=app/worker \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      - name: Check SonarQube Quality Gate
        id: sonar-quality-gate-worker
        uses: sonarsource/sonarqube-quality-gate-action@v1.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          
  sonarqube-scan-frontend-source:
    needs: determine-services
    if: needs.determine-services.outputs.build_frontend == 'true'
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Add SonarScanner to PATH
        run: echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH
      - name: Verify SonarScanner CLI
        run: sonar-scanner --version
      - name: Run SonarQube Scan (Frontend - Optimized)
        run: |
          sonar-scanner \
            -Dsonar.projectKey=frontend-service \
            -Dsonar.projectName='Frontend Service' \
            -Dsonar.sources=app/frontend \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.scm.disabled=true \
            -Dsonar.coverage.jacoco.xmlReportPaths=none \
            -Dsonar.javascript.node.maxspace=512
      - name: Check SonarQube Quality Gate
        id: sonar-quality-gate-frontend
        uses: sonarsource/sonarqube-quality-gate-action@v1.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # ---------------- CENTRALIZED FS & CONFIG SCAN ---------------- #

  trivy-scan-sources-and-configs:
    needs: determine-services
    runs-on: self-hosted
    outputs:
      backend_fs_has_critical: ${{ steps.trivy_backend_fs.outputs.backend_fs_has_critical }}
      backend_config_has_critical: ${{ steps.trivy_backend_config.outputs.backend_config_has_critical }}
      worker_fs_has_critical: ${{ steps.trivy_worker_fs.outputs.worker_fs_has_critical }}
      worker_config_has_critical: ${{ steps.trivy_worker_config.outputs.worker_config_has_critical }}
      frontend_fs_has_critical: ${{ steps.trivy_frontend_fs.outputs.frontend_fs_has_critical }}
      frontend_config_has_critical: ${{ steps.trivy_frontend_config.outputs.frontend_config_has_critical }}
  
    steps:
      - uses: actions/checkout@v4
  
      - name: Install Trivy
        run: |
          if ! command -v trivy &> /dev/null; then
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
            sudo mv ./bin/trivy /usr/local/bin/
          fi
          trivy --version
  
      # Backend FS scan (always runs when build_backend == true; will not stop the job)
      - id: trivy_backend_fs
        name: Trivy FS Scan - Backend Source Code
        if: needs.determine-services.outputs.build_backend == 'true'
        run: |
          set +e
          trivy fs --exit-code 1 --severity HIGH,CRITICAL app/backend
          rc=$?
          if [ "$rc" -eq 0 ]; then
            echo "backend_fs_has_critical=false" >> $GITHUB_OUTPUT
          elif [ "$rc" -eq 1 ]; then
            echo "backend_fs_has_critical=true" >> $GITHUB_OUTPUT
          else
            echo "backend_fs_has_critical=false" >> $GITHUB_OUTPUT
          fi
  
      # Backend Dockerfile/config scan
      - id: trivy_backend_config
        name: Trivy Config Scan - Backend Dockerfile
        if: needs.determine-services.outputs.build_backend == 'true'
        run: |
          set +e
          trivy config --exit-code 1 --severity HIGH,CRITICAL docker/backend
          rc=$?
          if [ "$rc" -eq 0 ]; then
            echo "backend_config_has_critical=false" >> $GITHUB_OUTPUT
          elif [ "$rc" -eq 1 ]; then
            echo "backend_config_has_critical=true" >> $GITHUB_OUTPUT
          else
            echo "backend_config_has_critical=false" >> $GITHUB_OUTPUT
          fi
  
      # Worker FS scan
      - id: trivy_worker_fs
        name: Trivy FS Scan - Worker Source Code
        if: needs.determine-services.outputs.build_worker == 'true'
        run: |
          set +e
          trivy fs --exit-code 1 --severity HIGH,CRITICAL app/worker
          rc=$?
          if [ "$rc" -eq 0 ]; then
            echo "worker_fs_has_critical=false" >> $GITHUB_OUTPUT
          elif [ "$rc" -eq 1 ]; then
            echo "worker_fs_has_critical=true" >> $GITHUB_OUTPUT
          else
            echo "worker_fs_has_critical=false" >> $GITHUB_OUTPUT
          fi
  
      # Worker Dockerfile/config scan
      - id: trivy_worker_config
        name: Trivy Config Scan - Worker Dockerfile
        if: needs.determine-services.outputs.build_worker == 'true'
        run: |
          set +e
          trivy config --exit-code 1 --severity HIGH,CRITICAL docker/worker
          rc=$?
          if [ "$rc" -eq 0 ]; then
            echo "worker_config_has_critical=false" >> $GITHUB_OUTPUT
          elif [ "$rc" -eq 1 ]; then
            echo "worker_config_has_critical=true" >> $GITHUB_OUTPUT
          else
            echo "worker_config_has_critical=false" >> $GITHUB_OUTPUT
          fi
  
      # Frontend FS scan
      - id: trivy_frontend_fs
        name: Trivy FS Scan - Frontend Source Code
        if: needs.determine-services.outputs.build_frontend == 'true'
        run: |
          set +e
          trivy fs --exit-code 1 --severity HIGH,CRITICAL app/frontend
          rc=$?
          if [ "$rc" -eq 0 ]; then
            echo "frontend_fs_has_critical=false" >> $GITHUB_OUTPUT
          elif [ "$rc" -eq 1 ]; then
            echo "frontend_fs_has_critical=true" >> $GITHUB_OUTPUT
          else
            echo "frontend_fs_has_critical=false" >> $GITHUB_OUTPUT
          fi
  
      # Frontend Dockerfile/config scan
      - id: trivy_frontend_config
        name: Trivy Config Scan - Frontend Dockerfile
        if: needs.determine-services.outputs.build_frontend == 'true'
        run: |
          set +e
          trivy config --exit-code 1 --severity HIGH,CRITICAL docker/frontend
          rc=$?
          if [ "$rc" -eq 0 ]; then
            echo "frontend_config_has_critical=false" >> $GITHUB_OUTPUT
          elif [ "$rc" -eq 1 ]; then
            echo "frontend_config_has_critical=true" >> $GITHUB_OUTPUT
          else
            echo "frontend_config_has_critical=false" >> $GITHUB_OUTPUT
          fi


  # ---------------- DOCKER BUILD + IMAGE SCAN + PUSH ---------------- #

  build-backend:
    needs: [trivy-scan-sources-and-configs, sonarqube-scan-backend-source]
    if: needs.sonarqube-scan-backend-source.result == 'success' && github.ref == 'refs/heads/main'
    runs-on: self-hosted
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      IMAGE_REPO: multi-cloud-cost-and-service-status-dashboard-repo
      VERSION: v${{ github.run_number }}
    steps:
      - uses: actions/checkout@v4
      - name: Build Backend Image
        run: |
          docker build -t "$DOCKERHUB_USERNAME/$IMAGE_REPO:backend-latest" \
                       -t "$DOCKERHUB_USERNAME/$IMAGE_REPO:backend-${VERSION}" \
                       -f docker/backend/Dockerfile .

  trivy-scan-backend-image:
    needs: build-backend
    if: needs.build-backend.result == 'success'
    runs-on: self-hosted
    steps:
      - name: Install Trivy
        run: |
          if ! command -v trivy &> /dev/null; then
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
            sudo mv ./bin/trivy /usr/local/bin/
          fi
      - name: Trivy Image Scan (Backend)
        run: trivy image --scanners vuln --exit-code 1 --severity HIGH,CRITICAL "${{ secrets.DOCKERHUB_USERNAME }}/multi-cloud-cost-and-service-status-dashboard-repo:backend-latest"

  push-backend:
    needs: trivy-scan-backend-image
    if: needs.trivy-scan-backend-image.result == 'success'
    runs-on: self-hosted
    steps:
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push Backend Image
        run: |
          docker push "${{ secrets.DOCKERHUB_USERNAME }}/multi-cloud-cost-and-service-status-dashboard-repo:backend-latest"
          docker push "${{ secrets.DOCKERHUB_USERNAME }}/multi-cloud-cost-and-service-status-dashboard-repo:backend-v${GITHUB_RUN_NUMBER}"

  build-worker:
    needs: [trivy-scan-sources-and-configs, sonarqube-scan-worker-source]
    if: needs.sonarqube-scan-worker-source.result == 'success' && github.ref == 'refs/heads/main'
    runs-on: self-hosted
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      IMAGE_REPO: multi-cloud-cost-and-service-status-dashboard-repo
      VERSION: v${{ github.run_number }}
    steps:
      - uses: actions/checkout@v4
      - name: Build Worker Image
        run: |
          docker build -t "$DOCKERHUB_USERNAME/$IMAGE_REPO:worker-latest" \
                       -t "$DOCKERHUB_USERNAME/$IMAGE_REPO:worker-${VERSION}" \
                       -f docker/worker/Dockerfile .

  trivy-scan-worker-image:
    needs: build-worker
    if: needs.build-worker.result == 'success'
    runs-on: self-hosted
    steps:
      - name: Install Trivy
        run: |
          if ! command -v trivy &> /dev/null; then
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
            sudo mv ./bin/trivy /usr/local/bin/
          fi
      - name: Trivy Image Scan (Worker)
        run: trivy image --scanners vuln --exit-code 1 --severity HIGH,CRITICAL "${{ secrets.DOCKERHUB_USERNAME }}/multi-cloud-cost-and-service-status-dashboard-repo:worker-latest"

  push-worker:
    needs: trivy-scan-worker-image
    if: needs.trivy-scan-worker-image.result == 'success'
    runs-on: self-hosted
    steps:
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push Worker Image
        run: |
          docker push "${{ secrets.DOCKERHUB_USERNAME }}/multi-cloud-cost-and-service-status-dashboard-repo:worker-latest"
          docker push "${{ secrets.DOCKERHUB_USERNAME }}/multi-cloud-cost-and-service-status-dashboard-repo:worker-v${GITHUB_RUN_NUMBER}"

  build-frontend:
    needs: [trivy-scan-sources-and-configs, sonarqube-scan-frontend-source]
    if: needs.sonarqube-scan-frontend-source.result == 'success' && github.ref == 'refs/heads/main'
    runs-on: self-hosted
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      IMAGE_REPO: multi-cloud-cost-and-service-status-dashboard-repo
      VERSION: v${{ github.run_number }}
    steps:
      - uses: actions/checkout@v4
      - name: Build Frontend Image
        run: |
          docker build -t "$DOCKERHUB_USERNAME/$IMAGE_REPO:frontend-latest" \
                       -t "$DOCKERHUB_USERNAME/$IMAGE_REPO:frontend-${VERSION}" \
                       -f docker/frontend/Dockerfile .

  trivy-scan-frontend-image:
    needs: build-frontend
    if: needs.build-frontend.result == 'success'
    runs-on: self-hosted
    steps:
      - name: Install Trivy
        run: |
          if ! command -v trivy &> /dev/null; then
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
            sudo mv ./bin/trivy /usr/local/bin/
          fi
      - name: Trivy Image Scan (Frontend)
        run: trivy image --scanners vuln --exit-code 1 --severity HIGH,CRITICAL "${{ secrets.DOCKERHUB_USERNAME }}/multi-cloud-cost-and-service-status-dashboard-repo:frontend-latest"

  push-frontend:
    needs: trivy-scan-frontend-image
    if: needs.trivy-scan-frontend-image.result == 'success'
    runs-on: self-hosted
    steps:
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push Frontend Image
        run: |
          docker push "${{ secrets.DOCKERHUB_USERNAME }}/multi-cloud-cost-and-service-status-dashboard-repo:frontend-latest"
          docker push "${{ secrets.DOCKERHUB_USERNAME }}/multi-cloud-cost-and-service-status-dashboard-repo:frontend-v${GITHUB_RUN_NUMBER}"

  # ---------------- DEPLOYMENT ---------------- #

  trigger-deployment:
    needs: [push-backend, push-worker, push-frontend]
    runs-on: self-hosted
    if: always()
    steps:
      - name: Debug results
        run: |
          echo "push-backend result:  ${{ needs.push-backend.result }}"
          echo "push-worker  result:  ${{ needs.push-worker.result }}"
          echo "push-frontend result: ${{ needs.push-frontend.result }}"

      - name: Build JSON Payload
        id: payload
        shell: bash
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          images=()
          [[ "${{ needs.push-backend.result }}" == "success" ]] && images+=("\"backend\":\"${DOCKERHUB_USERNAME}/multi-cloud-cost-and-service-status-dashboard-repo:backend-v${GITHUB_RUN_NUMBER}\"")
          [[ "${{ needs.push-worker.result }}" == "success" ]] && images+=("\"worker\":\"${DOCKERHUB_USERNAME}/multi-cloud-cost-and-service-status-dashboard-repo:worker-v${GITHUB_RUN_NUMBER}\"")
          [[ "${{ needs.push-frontend.result }}" == "success" ]] && images+=("\"frontend\":\"${DOCKERHUB_USERNAME}/multi-cloud-cost-and-service-status-dashboard-repo:frontend-v${GITHUB_RUN_NUMBER}\"")
          [[ ${#images[@]} -eq 0 ]] && echo "has_images=false" >> $GITHUB_OUTPUT && exit 0
          joined=$(IFS=,; echo "${images[*]}")
          echo "payload={\"ref\":\"$GITHUB_REF\",\"run_number\":\"$GITHUB_RUN_NUMBER\",$joined}" >> $GITHUB_OUTPUT
          echo "has_images=true" >> $GITHUB_OUTPUT

      - name: Trigger Deployment Workflow
        if: steps.payload.outputs.has_images == 'true'
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: trigger-deployment
          client-payload: ${{ steps.payload.outputs.payload }}

