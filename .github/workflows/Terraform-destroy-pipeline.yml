name: Terraform Destroy and Docker Cleanup

on:
  workflow_dispatch:
  schedule:
    - cron: '0 7 * * *'
    - cron: '30 14 * * *'

jobs:
  terraform-destroy:
    runs-on: self-hosted
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: us-east-1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        id: init
        working-directory: infra/terraform
        run: terraform init

      - name: Terraform Destroy
        id: destroy
        if: (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') && github.actor == 'Mahesh-Kotakonda'
        working-directory: infra/terraform
        run: terraform destroy -auto-approve
  docker-cleanup:
    runs-on: self-hosted
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      DOCKER_REPO: multi-cloud-cost-and-service-status-dashboard-repo
    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Clean up old Docker images
        run: |
          set -e
          
          # Get JWT token
          JWT_TOKEN=$(docker run --rm curlimages/curl:latest -s -X POST \
            -H "Content-Type: application/json" \
            -d '{"username": "'${DOCKERHUB_USERNAME}'", "password": "'${DOCKERHUB_TOKEN}'"}' \
            https://hub.docker.com/v2/users/login/ | jq -r .token)
          
          # Fetch all tags
          ALL_TAGS=$(docker run --rm curlimages/curl:latest -s \
            -H "Authorization: JWT ${JWT_TOKEN}" \
            "https://hub.docker.com/v2/repositories/${DOCKERHUB_USERNAME}/${DOCKER_REPO}/tags/?page_size=100" \
            | jq -r '.results[].name' | sort -rV)
          
          # Separate latest/non-latest
          NON_LATEST_TAGS=$(echo "$ALL_TAGS" | grep -v '^latest$')
          TAGS_TO_KEEP=$(echo "$NON_LATEST_TAGS" | head -n 3)
          LATEST_TAGS=$(echo "$ALL_TAGS" | grep '^latest$')
          TAGS_TO_KEEP="$TAGS_TO_KEEP $LATEST_TAGS"
          
          echo "Images to keep: $TAGS_TO_KEEP"
          echo "---"
          
          # Delete old tags
          for TAG in $ALL_TAGS; do
              if ! grep -qw "$TAG" <<< "$TAGS_TO_KEEP"; then
                  echo "Deleting image: ${DOCKER_REPO}:${TAG}"
                  docker run --rm curlimages/curl:latest -X DELETE \
                    -H "Authorization: JWT ${JWT_TOKEN}" -s \
                    "https://hub.docker.com/v2/repositories/${DOCKERHUB_USERNAME}/${DOCKER_REPO}/tags/${TAG}/"
              else
                  echo "Keeping image: ${DOCKER_REPO}:${TAG}"
              fi
          done
          
          echo "Cleanup complete."

