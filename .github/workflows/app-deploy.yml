name: App Deployment

on:
  repository_dispatch:
    types: [trigger-deployment]
  workflow_dispatch:

concurrency:
  group: app-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ##########################
  # Pre-check deployment
  ##########################
  pre-check:
    runs-on: self-hosted
    outputs:
      can_deploy: ${{ steps.set-output.outputs.can_deploy }}
    steps:
      - name: Check if deployment should run
        id: set-output
        run: |
          CAN_DEPLOY=false
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            CAN_DEPLOY=true
          fi
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.actor }}" = "Mahesh-Kotakonda" ]; then
            CAN_DEPLOY=true
          fi
          echo "can_deploy=$CAN_DEPLOY" >> $GITHUB_OUTPUT


  ##########################
  # Deploy Worker
  ##########################
  deploy_worker:
    needs: pre-check
    if: needs.pre-check.outputs.can_deploy == 'true'
    runs-on: self-hosted
    environment: production
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: us-east-1
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      IMAGE_REPO: multi-cloud-cost-and-service-status-dashboard-repo
      SSM_PARAM_NAME: myapp_database_credentials
      S3_JSON_PATH: s3://multi-cloud-cost-and-service-status-dashboard/infra/multi-cloud-dashboard-outputs.json
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Fetch DB credentials from SSM
        run: |
          PARAM_VALUE=$(aws ssm get-parameter --name "$SSM_PARAM_NAME" --with-decryption --query "Parameter.Value" --output text)
          DB_USER=$(echo $PARAM_VALUE | jq -r '.username')
          DB_PASS=$(echo $PARAM_VALUE | jq -r '.password')
          echo "DB_USER=$DB_USER" >> $GITHUB_ENV
          echo "DB_PASS=$DB_PASS" >> $GITHUB_ENV

      - name: Deploy Worker and Publish Metadata
        id: deploy_worker
        run: |
          PEM_PATH=~/ssh-keys/multi-cloud-cost-and-service-status-key.pem
          WORKER_IMAGE="${{ github.event.client_payload.worker }}"
          S3_JSON_PATH="worker-outputs.json"
      
          aws s3 cp "$S3_JSON_PATH" worker-outputs.json
          DB_HOST=$(jq -r '.db.endpoint | split(":")[0]' worker-outputs.json)
          DB_NAME=$(jq -r '.db.name' worker-outputs.json)
          INSTANCE_IDS=$(jq -r '.ec2_instance_ids[]' worker-outputs.json)
      
          for ID in $INSTANCE_IDS; do
            IP=$(aws ec2 describe-instances --instance-ids $ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
            OLD_CONTAINER_PRESENT=$(ssh -o StrictHostKeyChecking=no -i "$PEM_PATH" ec2-user@"$IP" \
              "sudo docker ps -a --filter 'name=worker' --format '{{.Names}}' | grep -w worker || true")
      
            if [ -z "$OLD_CONTAINER_PRESENT" ]; then
              PREV_IMAGE="$WORKER_IMAGE"
            else
              PREV_IMAGE=$(ssh -o StrictHostKeyChecking=no -i "$PEM_PATH" ec2-user@"$IP" \
                "sudo docker inspect --format='{{.Config.Image}}' worker || echo '$WORKER_IMAGE'")
            fi
      
            ssh -o StrictHostKeyChecking=no -i "$PEM_PATH" ec2-user@"$IP" \
              "sudo docker rm -f worker_new >/dev/null 2>&1 || true"
      
            ssh -o StrictHostKeyChecking=no -i "$PEM_PATH" ec2-user@"$IP" \
              "echo '$DOCKERHUB_TOKEN' | docker login -u '$DOCKERHUB_USERNAME' --password-stdin; \
               docker pull $WORKER_IMAGE; \
               docker run -d --name worker_new \
                 -e AWS_ACCESS_KEY_ID='$AWS_ACCESS_KEY_ID' \
                 -e AWS_SECRET_ACCESS_KEY='$AWS_SECRET_ACCESS_KEY' \
                 -e AWS_REGION='$AWS_REGION' \
                 -e DB_HOST='$DB_HOST' \
                 -e DB_NAME='$DB_NAME' \
                 -e DB_USER='$DB_USER' \
                 -e DB_PASS='$DB_PASS' \
                 -e POLL_INTERVAL_SECONDS=60000 \
                 $WORKER_IMAGE"
      
            sleep 30
      
            STATUS=$(ssh -o StrictHostKeyChecking=no -i "$PEM_PATH" ec2-user@"$IP" \
              "sudo docker ps --filter 'name=worker_new' --filter 'status=running' | grep worker_new >/dev/null 2>&1; echo \$?")
      
            if [ "$STATUS" -ne 0 ]; then
              ssh -o StrictHostKeyChecking=no -i "$PEM_PATH" ec2-user@"$IP" \
                "sudo docker logs --tail=200 worker_new || true; sudo docker rm -f worker_new || true"
              echo "Worker rollout failed. Old worker kept on $IP."
              exit 1
            else
              echo "worker_current_image=$WORKER_IMAGE" >> $GITHUB_OUTPUT
              echo "worker_previous_image=$PREV_IMAGE" >> $GITHUB_OUTPUT
              echo "worker_status=success" >> $GITHUB_OUTPUT
            fi
          done

  ##########################
  # Deploy Backend
  ##########################
  deploy_backend:
    needs: deploy_worker
    runs-on: self-hosted
    environment: production
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: us-east-1
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      IMAGE_REPO: multi-cloud-cost-and-service-status-dashboard-repo
      S3_JSON_PATH: s3://multi-cloud-cost-and-service-status-dashboard/infra/multi-cloud-dashboard-outputs.json
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy Backend (Blue-Green)
        id: deploy_backend
        run: |
          PEM_PATH=~/ssh-keys/multi-cloud-cost-and-service-status-key.pem
          aws s3 cp "$S3_JSON_PATH" backend-outputs.json
          ./deploy/deploy-backend.sh \
            --outputs-json backend-outputs.json \
            --pem-path "$PEM_PATH" \
            --db-host "${DB_HOST}" \
            --db-port "${DB_PORT}" \
            --db-name "${DB_NAME}" \
            --db-user "${DB_USER}" \
            --db-pass "${DB_PASS}" \
            --dockerhub-username "${DOCKERHUB_USERNAME}" \
            --dockerhub-token "${DOCKERHUB_TOKEN}" \
            --image-repo "${IMAGE_REPO}" \
            --image-tag "${{ github.event.client_payload.backend }}" \
            --instance-ids "$(jq -r '.ec2_instance_ids | join(",")' backend-outputs.json)" \
            --blue-tg "$(jq -r '.backend_blue_tg_arn' backend-outputs.json)" \
            --green-tg "$(jq -r '.backend_green_tg_arn' backend-outputs.json)" \
            --aws-access-key-id "${AWS_ACCESS_KEY_ID}" \
            --aws-secret-access-key "${AWS_SECRET_ACCESS_KEY}" \
            --aws-region "${AWS_REGION}"

  ##########################
  # Deploy Frontend
  ##########################
  deploy_frontend:
    needs: deploy_backend
    runs-on: self-hosted
    environment: production
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: us-east-1
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      IMAGE_REPO: multi-cloud-cost-and-service-status-dashboard-repo
      S3_JSON_PATH: s3://multi-cloud-cost-and-service-status-dashboard/infra/multi-cloud-dashboard-outputs.json
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy Frontend (Blue-Green)
        id: deploy_frontend
        run: |
          PEM_PATH=~/ssh-keys/multi-cloud-cost-and-service-status-key.pem
          aws s3 cp "$S3_JSON_PATH" frontend-outputs.json
          ./deploy/deploy-frontend.sh \
            --outputs-json frontend-outputs.json \
            --pem-path "$PEM_PATH" \
            --dockerhub-username "${DOCKERHUB_USERNAME}" \
            --dockerhub-token "${DOCKERHUB_TOKEN}" \
            --image-repo "${IMAGE_REPO}" \
            --image-tag "${{ github.event.client_payload.frontend }}" \
            --instance-ids "$(jq -r '.ec2_instance_ids | join(",")' frontend-outputs.json)" \
            --blue-tg "$(jq -r '.frontend_blue_tg_arn' frontend-outputs.json)" \
            --green-tg "$(jq -r '.frontend_green_tg_arn' frontend-outputs.json)" \
            --aws-access-key-id "${AWS_ACCESS_KEY_ID}" \
            --aws-secret-access-key "${AWS_SECRET_ACCESS_KEY}" \
            --aws-region "${AWS_REGION}"

  ##########################
  # Deploy Metadata
  ##########################
  deploy_metadata:
    needs: deploy_frontend
    runs-on: self-hosted
    environment: production
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: us-east-1
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      IMAGE_REPO: multi-cloud-cost-and-service-status-dashboard-repo
      DEPLOY_METADATA_S3_BUCKET: multi-cloud-cost-and-service-status-dashboard
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3

      - name: Run Deployment Metadata Script
        run: |
          python ./deploy/metadata.py \
            --pem-path "~/ssh-keys/multi-cloud-cost-and-service-status-key.pem" \
            --worker-current-image "${{ needs.deploy_worker.outputs.worker_current_image }}" \
            --worker-previous-image "${{ needs.deploy_worker.outputs.worker_previous_image }}" \
            --worker-status "${{ needs.deploy_worker.outputs.worker_status }}" \
            --backend-current-image "${{ needs.deploy_backend.outputs.current_image }}" \
            --backend-previous-image "${{ needs.deploy_backend.outputs.previous_image }}" \
            --frontend-current-image "${{ needs.deploy_frontend.outputs.current_image }}" \
            --frontend-previous-image "${{ needs.deploy_frontend.outputs.previous_image }}" \
            --s3-bucket "${{ env.DEPLOY_METADATA_S3_BUCKET }}" \
            --dockerhub-username "${{ env.DOCKERHUB_USERNAME }}" \
            --dockerhub-token "${{ env.DOCKERHUB_TOKEN }}" \
            --aws-access-key-id "${{ env.AWS_ACCESS_KEY_ID }}" \
            --aws-secret-access-key "${{ env.AWS_SECRET_ACCESS_KEY }}" \
            --aws-region "${{ env.AWS_REGION }}" \
            --image-repo "${{ env.IMAGE_REPO }}" \
            --github-actor "${{ github.actor }}"
