name: App Deployment

on:
  repository_dispatch:
    types: [trigger-deployment]
  workflow_dispatch:

concurrency:
  group: app-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Guard job to check branch and username
  pre-check:
    runs-on: ubuntu-latest
    outputs:
      can_deploy: ${{ steps.set-output.outputs.can_deploy }}
    steps:
      - name: Check if deployment should run
        id: set-output
        run: |
          echo "ref=${{ github.event.client_payload.ref }}"
          echo "actor=${{ github.actor }}"
          if [ "${{ github.event.client_payload.ref }}" = "refs/heads/main" ] && [ "${{ github.actor }}" = "Mahesh-Kotakonda" ]; then
            echo "✅ Allowed to deploy"
            echo "can_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Not allowed to deploy (must be main branch + correct user)"
            echo "can_deploy=false" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: pre-check
    if: needs.pre-check.outputs.can_deploy == 'true'
    runs-on: self-hosted
    environment:
      name: production   # 👈 set required reviewers in repo settings

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: us-east-1
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      IMAGE_REPO: multi-cloud-cost-and-service-status-dashboard-repo
      SSM_PARAM_NAME: myapp_database_credentials
      S3_JSON_PATH: s3://multi-cloud-cost-and-service-status-dashboard/infra/multi-cloud-dashboard-outputs.json

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Fetch DB credentials from SSM
        run: |
          PARAM_VALUE=$(aws ssm get-parameter --name "$SSM_PARAM_NAME" --with-decryption --query "Parameter.Value" --output text)
          DB_USER=$(echo $PARAM_VALUE | jq -r '.username')
          DB_PASS=$(echo $PARAM_VALUE | jq -r '.password')
          echo "DB_USER=$DB_USER" >> $GITHUB_ENV
          echo "DB_PASS=$DB_PASS" >> $GITHUB_ENV

      # Deploy Worker
      - name: Deploy Worker
        run: |
          PEM_PATH=~/ssh-keys/multi-cloud-cost-and-service-status-key.pem
          aws s3 cp "$S3_JSON_PATH" worker-outputs.json
          DB_HOST=$(jq -r '.db.endpoint | split(":")[0]' worker-outputs.json)
          DB_NAME=$(jq -r '.db.name' worker-outputs.json)
          INSTANCE_IDS=$(jq -r '.ec2_instance_ids[]' worker-outputs.json)
          for ID in $INSTANCE_IDS; do
            IP=$(aws ec2 describe-instances --instance-ids $ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
            ssh -o StrictHostKeyChecking=no -i "$PEM_PATH" ec2-user@"$IP" \
              "echo '$DOCKERHUB_TOKEN' | docker login -u '$DOCKERHUB_USERNAME' --password-stdin; \
               docker pull $DOCKERHUB_USERNAME/$IMAGE_REPO:worker-latest; \
               docker rm -f worker || true; \
               docker run -d --name worker \
                 -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_REGION \
                 -e SSM_PARAM_NAME=myapp_database_credentials \
                 -e DB_HOST='$DB_HOST' -e DB_NAME='$DB_NAME' \
                 -e POLL_INTERVAL_SECONDS=60000 \
                 $DOCKERHUB_USERNAME/$IMAGE_REPO:worker-latest"
          done

      # Deploy Backend
      - name: Deploy Backend
        run: |
          PEM_PATH=~/ssh-keys/multi-cloud-cost-and-service-status-key.pem
          aws s3 cp "$S3_JSON_PATH" backend-outputs.json
          DB_ENDPOINT=$(jq -r '.db.endpoint' backend-outputs.json)
          DB_HOST=$(echo $DB_ENDPOINT | cut -d: -f1)
          DB_PORT=$(echo $DB_ENDPOINT | cut -d: -f2)
          DB_NAME=$(jq -r '.db.name' backend-outputs.json)
          INSTANCE_IDS=$(jq -r '.ec2_instance_ids[]' backend-outputs.json)
          for ID in $INSTANCE_IDS; do
            IP=$(aws ec2 describe-instances --instance-ids $ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
            ssh -o StrictHostKeyChecking=no -i "$PEM_PATH" ec2-user@"$IP" \
              "echo '$DOCKERHUB_TOKEN' | docker login -u '$DOCKERHUB_USERNAME' --password-stdin; \
               docker pull $DOCKERHUB_USERNAME/$IMAGE_REPO:backend-latest; \
               docker rm -f backend || true; \
               docker run -d --name backend \
                 -e DB_HOST='$DB_HOST' -e DB_PORT='$DB_PORT' -e DB_NAME='$DB_NAME' \
                 -e DB_USER='${DB_USER}' -e DB_PASS='${DB_PASS}' \
                 -p 8080:8000 \
                 $DOCKERHUB_USERNAME/$IMAGE_REPO:backend-latest"
          done

      # Deploy Frontend
      - name: Deploy Frontend
        run: |
          PEM_PATH=~/ssh-keys/multi-cloud-cost-and-service-status-key.pem
          aws s3 cp "$S3_JSON_PATH" frontend-outputs.json
          INSTANCE_IDS=$(jq -r '.ec2_instance_ids[]' frontend-outputs.json)
          for ID in $INSTANCE_IDS; do
            IP=$(aws ec2 describe-instances --instance-ids $ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
            ssh -o StrictHostKeyChecking=no -i "$PEM_PATH" ec2-user@"$IP" \
              "echo '$DOCKERHUB_TOKEN' | docker login -u '$DOCKERHUB_USERNAME' --password-stdin; \
               docker pull $DOCKERHUB_USERNAME/$IMAGE_REPO:frontend-latest; \
               docker rm -f frontend || true; \
               docker run -d --name frontend -p 3000:3000 \
                 $DOCKERHUB_USERNAME/$IMAGE_REPO:frontend-latest"
          done
